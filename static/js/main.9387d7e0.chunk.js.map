{"version":3,"sources":["components/Header.js","components/ToDoElement.js","components/hooks/useLocalStorage.js","components/ToDoList.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","ToDoElement","props","task","useLocalStorage","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","ToDoList","tasks","setTasks","input","setInput","onSubmit","event","preventDefault","rows","cols","placeholder","onChange","target","type","map","index","id","onClick","name","filteredArray","filter","handleRemoveItem","App","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAMeA,EAJA,WACb,OAAO,qBAAKC,UAAU,iDAAf,mCCOMC,EARK,SAACC,GACnB,OACE,qBAAKF,UAAU,uEAAf,SACGE,EAAMC,QC8BEC,MAjCf,SAAyBC,EAAKC,GAG5B,MAAsCC,oBAAS,WAC7C,IAEE,IAAMC,EAAOC,OAAOC,aAAaC,QAAQN,GAEzC,OAAOG,EAAOI,KAAKC,MAAML,GAAQF,EACjC,MAAOQ,GAGP,OADAC,QAAQC,IAAIF,GACLR,MATX,mBAAOW,EAAP,KAAoBC,EAApB,KA2BA,MAAO,CAACD,EAbS,SAACE,GAChB,IAEE,IAAMC,EAAeD,aAAiBE,SAAWF,EAAMF,GAAeE,EAEtED,EAAeE,GAEfX,OAAOC,aAAaY,QAAQjB,EAAKO,KAAKW,UAAUH,IAChD,MAAON,GAEPC,QAAQC,IAAIF,OCkCHU,EA1DE,WACf,MAA0BpB,EAAgB,QAAS,IAAnD,mBAAOqB,EAAP,KAAcC,EAAd,KACA,EAA0BnB,mBAAS,IAAnC,mBAAOoB,EAAP,KAAcC,EAAd,KAiBA,OACE,gCACE,cAAC,EAAD,IACA,uBAAMC,SAdV,SAAsBC,GACpBJ,EAAS,GAAD,mBAAKD,GAAL,CAAYE,KACpBG,EAAMC,kBAYJ,UACE,wBAAO/B,UAAU,yDAAjB,0BAEE,uBACA,0BACEgC,KAAK,IACLC,KAAK,KACLjC,UAAU,oEACVkC,YAAY,kBACZC,SA3BV,SAAsBL,GACpBF,EAASE,EAAMM,OAAOjB,aA6BlB,uBACA,uBACEkB,KAAK,SACLrC,UAAU,uJACVmB,MAAM,cAGTM,EAAMa,IACHb,EAAMa,KAAI,SAAC9B,EAAM+B,GAAP,OACR,sBAAKvC,UAAU,OAAf,UACE,cAAC,EAAD,CAAawC,GAAIhC,EAAML,KAAMK,GAAWA,GACxC,wBACER,UAAU,gIACVyC,QAAS,kBAlCE,SAACC,GACxB,IAAMC,EAAgBlB,EAAMmB,QAAO,SAACpC,GAAD,OAAUA,IAASkC,KAEtDhB,EAAS,YAAIiB,IA+BcE,CAAiBrC,IAFlC,0BAQJ,kC,MC/CKsC,MARf,WACE,OACE,qBAAK9C,UAAU,MAAf,SACE,cAAC,EAAD,OCMS+C,EAZS,SAAAC,GAClBA,GAAeA,aAAuB3B,UACxC,6BAAqB4B,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.9387d7e0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => {\r\n  return <div className=\"block bg-yellow-200 h-10 text-center p-2 mb-10\">Your own To Do List!</div>;\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nconst ToDoElement = (props) => {\r\n  return (\r\n    <div className=\"flex flex-grow justify-center text-center ml-4 py-2 my-2 bg-red-400 \">\r\n      {props.task}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ToDoElement;\r\n","import { useState } from 'react';\r\n\r\nfunction useLocalStorage(key, initialValue) {\r\n  // State to store our value\r\n  // Pass initial state function to useState so logic is only executed once\r\n  const [storedValue, setStoredValue] = useState(() => {\r\n    try {\r\n      // Get from local storage by key\r\n      const item = window.localStorage.getItem(key);\r\n      // Parse stored json or if none return initialValue\r\n      return item ? JSON.parse(item) : initialValue;\r\n    } catch (error) {\r\n      // If error also return initialValue\r\n      console.log(error);\r\n      return initialValue;\r\n    }\r\n  });\r\n  // Return a wrapped version of useState's setter function that ...\r\n  // ... persists the new value to localStorage.\r\n  const setValue = (value) => {\r\n    try {\r\n      // Allow value to be a function so we have same API as useState\r\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\r\n      // Save state\r\n      setStoredValue(valueToStore);\r\n      // Save to local storage\r\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n    } catch (error) {\r\n      // A more advanced implementation would handle the error case\r\n      console.log(error);\r\n    }\r\n  };\r\n  return [storedValue, setValue];\r\n}\r\n\r\nexport default useLocalStorage;\r\n","import Header from './Header';\r\nimport ToDoElement from './ToDoElement';\r\nimport useLocalStorage from './hooks/useLocalStorage';\r\nimport React, { useState } from 'react';\r\n\r\nconst ToDoList = () => {\r\n  const [tasks, setTasks] = useLocalStorage('tasks', []);\r\n  const [input, setInput] = useState('');\r\n\r\n  function handleChange(event) {\r\n    setInput(event.target.value);\r\n  }\r\n\r\n  function handleSubmit(event) {\r\n    setTasks([...tasks, input]);\r\n    event.preventDefault();\r\n  }\r\n\r\n  const handleRemoveItem = (name) => {\r\n    const filteredArray = tasks.filter((item) => item !== name);\r\n\r\n    setTasks([...filteredArray]);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <form onSubmit={handleSubmit}>\r\n        <label className=\"justify-center align-middle text-center mx-2 px-2 py-2\">\r\n          Things to do:\r\n          <br />\r\n          <textarea\r\n            rows=\"4\"\r\n            cols=\"50\"\r\n            className=\" justify-center align-middle text-center flex-grow mx-2 px-2 py-2\"\r\n            placeholder=\"Log your tasks!\"\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <br />\r\n        <input\r\n          type=\"submit\"\r\n          className=\"justify-center align-middle  bg-yellow-500 hover:bg-yellow-700 text-white text-center font-bold my-2 mx-6 px-2 py-2 border border-yellow-700 rounded\"\r\n          value=\"Submit\"\r\n        />\r\n      </form>\r\n      {tasks.map\r\n        ? tasks.map((item, index) => (\r\n            <div className=\"flex\">\r\n              <ToDoElement id={item} task={item} key={item} />\r\n              <button\r\n                className=\"flex  bg-purple-500 hover:bg-purple-700 text-white text-center font-bold my-2 mx-6 px-2 py-2 border border-purple-700 rounded\"\r\n                onClick={() => handleRemoveItem(item)}\r\n              >\r\n                Remove\r\n              </button>\r\n            </div>\r\n          ))\r\n        : 'tasks.map is not a function'}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ToDoList;\r\n","import ToDoList from './components/ToDoList';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ToDoList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}